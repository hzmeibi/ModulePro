apply plugin: 'com.android.application'

android {
    compileSdkVersion baseAndroid.compileSdkVersion
    defaultConfig {
        applicationId baseVersion.applicationId
        minSdkVersion baseAndroid.minSdkVersion
        targetSdkVersion baseAndroid.targetSdkVersion
        versionCode APP_VERSION_CODE as int
        versionName APP_VERSION_NAME

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    sourceSets {
        main {
            res.srcDirs baseResource.res
            assets.srcDirs baseResource.assets
            jniLibs.srcDirs baseResource.jniLibs
        }
    }

    signingConfigs {//签名信息 可以自定义很多
        releaseConfig {
            storeFile file("key_test.keystore")
            storePassword "android"
            keyAlias "android"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_DEBUG_TYPE", "$IS_DEBUG_TYPE"
            buildConfigField "boolean", "IS_SH_PROJECT", "$IS_SH_PROJECT"
            signingConfig signingConfigs.releaseConfig
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_DEBUG_TYPE", "$IS_DEBUG_TYPE"
            buildConfigField "boolean", "IS_SH_PROJECT", "$IS_SH_PROJECT"
        }
    }

    //文件输出
    android.applicationVariants.all { variant ->
        variant.outputs.all {

            variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk/release")

            outputFileName = "${APP_NAME}_${APP_VERSION_NAME}.apk"

        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: baseResource.libs)
    api baseDependencies.arouterApi
    annotationProcessor baseDependencies.arouterCompiler
    api project(':module-base')
    if (!IS_DEBUG_TYPE) {
        implementation project(':module-a')
        implementation project(':module-b')
    }
}
